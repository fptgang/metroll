---
description: 
globs: 
alwaysApply: true
---
1. If the code is going to be shared across services (e.g. Spring OpenFeign Clients, DTOs, Enums, Mappers, Exception)
> Put them in com.fpt.metroll.shared

2. If the code is going to be service-specific, and only be exposed to the API-gateway
> Prefer putting them locally in the right service module, e.g. com.fpt.metroll.<service module>

3. Check for Security using com.fpt.metroll.shared.util.SecurityUtil
> requireUserId(): check auth first, return current id (not-null)
> getUserId(): return current id (or null if not auth); no exception raised
> requireUserRole(): check auth first, return current role (not-null)
> getUserRole(): return current role (or null if not auth); no exception raised
> requireUserEmail(): check auth first, return current email (not-null)
> getUserEmail(): return current email (or null if not auth); no exception raised
> elevate(): temporarily elevate the authenticated user onto a higher role, e.g. as ADMIN
- Use com.fpt.metroll.shared.exception.NoPermissionException to throw no-permission error in services

4. Use MongoHelper for Pagination with Spring Data MongoDB
```java
var res = mongoHelper.find(query -> {
    if (search != null && !search.isBlank()) {
        Criteria criteria = new Criteria().orOperator(
                Criteria.where("fullName").regex(search, "i"),
                Criteria.where("email").regex(search, "i"),
                Criteria.where("phoneNumber").regex(search, "i"));
        query.addCriteria(criteria);
    }

    // Staff can only see Customer
    if (SecurityUtil.hasRole(AccountRole.STAFF)) {
        query.addCriteria(Criteria.where("role")
                .is(AccountRole.CUSTOMER.name()));
    }

    return query;
}, pageable, Account.class).map(accountMapper::toDto);
return PageMapper.INSTANCE.toPageDTO(res);
```

5. Use MapStruct for Mapping between DTO and Document
> Use @Mapper(componentModel = "spring")
> Explicitly uses the Mapper if the DTO/Document relies on other mappers
> If needed, use Decorator pattern to further customizing the mapping on top of the default
> Put Mappers in the right shared module or service-specific module

6. DTO
- Use Suffix "Request" for the request DTO (incoming) such as AccountCreateRequest, AccountUpdateRequest
- Use Suffix "Dto" for the response/generic DTO (outgoing) such as AccountDto, AccountSummaryDto
- Construct distinct DTOs for different needs: AccountDto, AccountSummaryDto, AccountCreateRequest, AccountUpdateRequest

7. Document
- Do NOT use ``@DbRef` to refer entities in different service/module unless there exists secondary-duplicated document within the same service
- Each service holds a different database (database-per-service design)
- Create/Update date:
```java
    @CreatedDate
    private Instant createdAt;

    @LastModifiedDate
    private Instant updatedAt;
```
- Use Instant for date-time
- Prefer introducing Enums where appropriate instead of string
- Leverage MongoDB Bson on embedding & nested structure, introduce them as distinct, small-sized data classes instead of document class

8. Service
- Use Guava Preconditions to quickly check simple validation such as input validation
- Do not check Security with Preconditions, write manually and raise NoPermissionException
- Use @Transactional if there are modifications to more than one repository

9. Cross-Service communication
- Use Spring Cloud OpenFeign, put these services in the shared module: com.fpt.metroll.shared.domain.client
- Ensure the method definition matches the right controller in feature-specific service
- Ensure the DTOs, Enums and Mappers relevant to the method definition is also put in the shared module: com.fpt.metroll.shared.domain.dto, com.fpt.metroll.shared.domain.enums, com.fpt.metroll.shared.domain.mapper to ensure syntax check across modules
- FeignClientInterceptor already exists to handle cross-service authorization, you do not have to care this

10. Configuration
- Centralize all configuration files in config-server module: config-server/src/main/resources/config
- Prefer file-based configuration than in-code unless there is a need for complex customization

11. Logging
- Use Lombok `@Slf4j`
- Prefer logging warning and error
- Only logging info if necessary

12. Technology
- Use Spring Cloud Streams with RabbitMQ
- Use Spring Data MongoDB

13. Utilities
- Prefer org.apache.commons.lang3 (Apache Commons Lang 3) and com.google.common (Guava) for utilties to writing your own utilities

14. Conditional response
- Use SecurityUtil to override filter params
E.g. an endpoint has a "userId" filter, this is only meaningful to ADMIN (or sometimes STAFF), otherwise, you use SecurityUtil#requireUserId or SecurityUtil#getUserId to override that

- Write Mapstruct Decorator to intercept the original DTO without duplication. This is typically used for conditional response, redacting sensitive information, role-based DTO customization
```java
@Mapper(componentModel = "spring", uses = { AnswerOptionMapper.class })
@DecoratedWith(QuestionAskMapperDecorator.class)
public interface QuestionAskMapper {
    QuestionAskMapper INSTANCE = Mappers.getMapper(QuestionAskMapper.class);

    QuestionAskDto toDto(Question question);
}
```
```java
@Component
public abstract class QuestionAskMapperDecorator implements QuestionAskMapper {
    @Autowired
    private QuestionAskMapper delegate;

    @Override
    public QuestionAskDto toDto(Question question) {
        QuestionAskDto dto = delegate.toDto(question);

        dto.setAnswerOptions(redactAnswerOptions(question.getAnswerOptions()));
        if (question.getWordsAnswer() != null) {
            dto.setWordsLength(question.getWordsAnswer().stream()
                    .map(String::length)
                    .collect(Collectors.toList()));
        }

        return dto;
    }

    private List<AnswerOptionDto> redactAnswerOptions(List<AnswerOption> answerOptions) {
        if (answerOptions == null) {
            return null;
        }
        return answerOptions.stream()
                .map(option -> AnswerOptionDto.builder()
                        .content(option.getContent())
                        .isCorrect(null)
                        .explanation(null)
                        .build())
                .collect(Collectors.toList());
    }
}
```

15. Monetary Fields
- Any fields storing money, credits, etc MUST use BigDecimal. You also need to tag @Field(targetType=DECIMAL128) on the corresponding field in MongoDB Document for precise serialization
